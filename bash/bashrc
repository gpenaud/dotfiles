# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    **) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
[ $SHELL = "/bin/bash" ] && shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=500000
HISTFILESIZE=5000000

PROMPT_COMMAND="history -a; $PROMPT_COMMAND"
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
[ $SHELL = "/bin/bash" ] && shopt -s checkwinsize

# define some constant
export WALLPAPER=wallpaper

# add things to path
export PATH=$PATH:~/:~/bin:~/bin/global-aliases:/home/guillaume/bin:/home/gpenaud/taf/xi_scripts/gpenaud/xi-helpers:/home/gpenaud/taf/xi_cluster/cloud
export PATH=$PATH:/home/gpenaud/taf/xi_cluster/xi-nova/bin:/home/gpenaud/taf/deeply/bin
export EDITOR=vi
export SHELL_SIZE=$(stty -a | grep columns | tr -d ';' | cut -d' ' -f 7)

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
fi

# Exports definitions
export GNUPGHOME='/home/gpenaud/.gnupg'
export VAGRANT_HOME=/ssd/vagrant.d
export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
export ANSIBLE_CONFIG_PATH=/home/gpenaud/taf/infrastructure/ansible/roles/ansible.cfg
export ANSIBLE_SUDO_PASS=$(cat /home/gpenaud/taf/infrastructure/ansible/deployment/.credentials/sudo_deployer.key)
export ANSIBLE_KEYFILE=/home/gpenaud/.ssh/deploy

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
alias_files=(
  ansible
  apt
  cloud
  docker-machine
  generic
  gerrit
  git
  lxc
  remote
  ssh
  vagrant
)

for alias_file in ${alias_files[@]}; do
  if [ -f bash/alias/${alias_file} ]; then
      . bash/alias/${alias_file}
  fi
done
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

if [ -f ~/.bash_aliases/docker ] && [ dpkg -l docker &>/dev/null ]; then
    . ~/.bash_aliases/docker
fi

if [ -f ~/.bash_scripts/merge_history.bash ]; then
    . ~/.bash_scripts/merge_history.bash
fi

if [ -f /usr/local/bin/openstack-login ]; then
    . openstack-login >/dev/null 2>&1
fi

if [ -f ~/.git-completion.bash ]; then
    . ~/.git-completion.bash
fi


if [ $SHELL = "/bin/bash" ]; then
    # sourcing des scripts pour docker-machine
    source /etc/bash_completion.d/docker-machine.bash
    source /etc/bash_completion.d/docker-machine-prompt.bash
    source /etc/bash_completion.d/docker-machine-wrapper.bash

    # Configuration du prompt
    if [ -f bash/prompt/gitprompt.sh ]; then
        . bash/prompt/gitprompt.sh
    fi
fi

# set ssh-agent
if [ ! -S ~/.ssh/ssh_auth_sock ]; then
    eval `ssh-agent`
    ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
fi

ssh-add -l | grep "The agent has no identities" && ssh-add
source <(kubectl completion bash)
