# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    **) ;;
      *) return;;
esac

# get script path
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth
HISTSIZE=500000
HISTFILESIZE=5000000
# append to the history file, don't overwrite it
[ $SHELL = "/bin/bash" ] && shopt -s histappend
PROMPT_COMMAND="history -a; $PROMPT_COMMAND"

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
[ $SHELL = "/bin/bash" ] && shopt -s checkwinsize

# load environment
if [ -e "${DIR}/env_loader" ]; then
  . ${DIR}/env_loader
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
alias_files=(
  ansible
  apt
  cloud
  docker-machine
  generic
  gerrit
  git
  lxc
  remote
  ssh
  vagrant
)

for alias_file in ${alias_files[@]}; do
  if [ -f $DOTFILES_PATH/bash/alias/${alias_file} ]; then
      . $DOTFILES_PATH/bash/alias/${alias_file}
  fi
done
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

if [ -f $DOTFILES_PATH/bash/alias/docker ] && [ dpkg -l docker &>/dev/null ]; then
    . $DOTFILES_PATH/bash/alias/docker
fi

if [ -f ~/.bash_scripts/merge_history.bash ]; then
    . ~/.bash_scripts/merge_history.bash
fi

if [ -f ~/.git-completion.bash ]; then
    . ~/.git-completion.bash
fi

if [ ! -S ~/.ssh/ssh_auth_sock ]; then
   eval `ssh-agent`
   ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
fi

export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
ssh-add -l | grep "The agent has no identities" && ssh-add

if [ $SHELL = "/bin/bash" ]; then
    # Configuration du prompt
    if [ -f $DOTFILES_PATH/bash/prompt/gitprompt.sh ]; then
        . $DOTFILES_PATH/bash/prompt/gitprompt.sh
    fi
fi
